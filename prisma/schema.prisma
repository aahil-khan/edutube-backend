// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password_hash String
  role          String        @default("student")
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  
  // Relations
  teachers      Teacher[]
  enrollments   Enrollment[]
  watchHistory  WatchHistory[]
  
  @@map("users")
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  teachers    Teacher[]
  lectures    Lecture[]
  
  @@map("courses")
}

model Teacher {
  id         Int          @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  
  // Relations
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course      Course       @relation(fields: [course_id], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  lectures    Lecture[]
  
  @@unique([user_id, course_id])
  @@map("teachers")
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  student_id Int
  teacher_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  student User    @relation(fields: [student_id], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  
  @@unique([student_id, teacher_id])
  @@map("enrollments")
}

model Lecture {
  id             Int            @id @default(autoincrement())
  teacher_id     Int
  course_id      Int
  chapter_name   String
  chapter_number Int
  lecture_number Int
  title          String
  youtube_url    String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  
  // Relations
  teacher       Teacher        @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  watchHistory  WatchHistory[]
  
  @@map("lectures")
}

model WatchHistory {
  id           Int      @id @default(autoincrement())
  user_id      Int
  lecture_id   Int
  progress     Float    @default(0.0) // Progress in percentage (0-100)
  last_watched DateTime @default(now())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, lecture_id])
  @@map("watch_history")
}
